#!/bin/bash
set -e

PACMAN=paru
PKG_FILE="${HOME}/.config/dpw/packages.ini"

# Generate packages.ini if it does not exist
if [ ! -e "${PKG_FILE}" ]; then
  printf "\033[1m::\033[0m Packages file '%s' does not exist.\n" "${PKG_FILE}"
  while true; do
    printf "\033[1m::\033[0m Do you wish to generate one using the currently installed packages [Y/n]? "
    read -r YN
    case ${YN:-Y} in
      [Yy]*)
        mkdir --parents "${PKG_FILE%/*}"
        "${PACMAN}" --query --explicit --quiet > "${PKG_FILE}"
        break;;
      [Nn]*)
        exit;;
    esac
  done
fi

# Calculate changes
function diff { comm -23 <(echo -n "$1") <(echo -n "$2"); }

PKG_DECLARED=$(sed 's/#.*$//;s/ *//g; /./!d' "${PKG_FILE}" | sort --unique)

PKG_INSTALLED=$("${PACMAN}" -Q --quiet | sort --unique)
PKG_INSTALLED_EXPLICIT=$("${PACMAN}" -Q --quiet --explicit | sort --unique)
PKG_INSTALLED_UNREQUIRED=$("${PACMAN}" -Q --quiet --explicit --unrequired --unrequired | sort --unique)

PKG_EXPLICIT_NOT_DECLARED=$(diff "${PKG_INSTALLED_EXPLICIT}" "${PKG_DECLARED}")
PKG_MARK_DEPENDENCY=$(diff "${PKG_EXPLICIT_NOT_DECLARED}" "${PKG_INSTALLED_UNREQUIRED}")
PKG_REMOVE=$(diff "${PKG_EXPLICIT_NOT_DECLARED}" "${PKG_MARK_DEPENDENCY}")

PKG_DECLARED_NOT_EXPLICIT=$(diff "${PKG_DECLARED}" "${PKG_INSTALLED_EXPLICIT}")
PKG_INSTALL=$(diff "${PKG_DECLARED_NOT_EXPLICIT}" "${PKG_INSTALLED}")
PKG_MARK_EXPLICIT=$(diff "${PKG_DECLARED_NOT_EXPLICIT}" "${PKG_INSTALL}")

# Print summary
if [ -n "${PKG_REMOVE}" ]; then
  printf "\033[1m::\033[1;31m Remove\033[0m %s\n" "$(echo "${PKG_REMOVE}" | tr '\n' ' ')"
fi
if [ -n "${PKG_INSTALL}" ]; then
  printf "\033[1m::\033[1;32m Install\e[0m %s\n" "$(echo "${PKG_INSTALL}" | tr '\n' ' ')"
fi
if [ -n "${PKG_MARK_DEPENDENCY}" ]; then
  printf "\033[1m::\033[1;33m Mark dependency\e[0m %s\n" "$(echo "${PKG_MARK_DEPENDENCY}" | tr '\n' ' ')"
fi
if [ -n "${PKG_MARK_EXPLICIT}" ]; then
  printf "\033[1m::\033[1;33m Mark explicit\e[0m %s\n" "$(echo "${PKG_MARK_EXPLICIT}" | tr '\n' ' ')"
fi

# Do actions
if [ -n "${PKG_REMOVE}" ]; then
  "${PACMAN}" --remove --recursive --unneeded ${PKG_REMOVE}
fi
if [ -n "${PKG_INSTALL}" ]; then
  "${PACMAN}" --sync ${PKG_INSTALL}
fi
if [ -n "${PKG_MARK_DEPENDENCY}" ]; then
  "${PACMAN}" --database --asdeps ${PKG_MARK_DEPENDENCY}
fi
if [ -n "${PKG_MARK_EXPLICIT}" ]; then
  "${PACMAN}" --database --asexplicit ${PKG_MARK_EXPLICIT}
fi

# Check for newly unused dependencies arising from the database changes
PKG_INSTALLED_UNUSED=$("${PACMAN}" -Q --quiet --deps --unrequired --unrequired | sort --unique)

if [ -n "${PKG_INSTALLED_UNUSED}" ]; then
  printf "\033[1m::\033[1;31m Prune\033[0m %s\n" "$(echo "${PKG_INSTALLED_UNUSED}" | tr '\n' ' ')"
  "${PACMAN}" --remove --recursive ${PKG_INSTALLED_UNUSED}
fi

# Do a system upgrade
echo -e "\033[1m::\033[1;36m Upgrade\033[0m all"
"${PACMAN}" --sync --sysupgrade --refresh
